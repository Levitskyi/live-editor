{"version":3,"sources":["ConsoleService.js","components/Console.js","App.js","components/MonacoEditor.js","serviceWorker.js","components/LogsReplacer.js","index.js"],"names":["subscribers","__webpack_exports__","subscribe","fn","push","length","notify","value","forEach","Console","_ref","logs","code","_useState","useState","_useState2","Object","_Users_taraslevitskyi_projects_react_live_editor_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","output","setOutput","_useState3","_useState4","liveReload","setLiveReload","useEffect","ConsoleService","onLiveReloadChange","runCode","console","eval","error","log","_Users_taraslevitskyi_projects_react_live_editor_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","clearLogs","definedOutput","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","className","onClick","map","element","index","message","lineNumber","item","mes","lastMes","undefined","JSON","stringify","text","key","concat","socket","MonacoEditor","onChange","editorDidMount","react_default","lib_default","width","language","theme","options","selectOnLineNumbers","automaticLayout","App","slicedToArray","setText","lodash","debounce","components_MonacoEditor","e","emit","editor","io","connect","on","data","viewState","saveViewState","restoreViewState","Boolean","window","location","hostname","match","stdlog","bind","firstPart","Error","stack","split","_len","arguments","args","Array","_key","toConsumableArray","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9db54555.chunk.js","sourcesContent":["const subscribers = [];\n\nexport default {\n    subscribe(fn) {\n        subscribers.push(fn);\n        return subscribers.length - 1;\n    },\n    notify(value) {\n        subscribers.forEach(fn => fn(value));\n    }\n}\n","import React, { useEffect, useState } from 'react';\nimport ConsoleService from '../ConsoleService';\n\nconst Console = ({ logs, code }) => {\n    const [output, setOutput] = useState(null);\n    const [liveReload, setLiveReload] = useState(true);\n\n    useEffect(() => {\n        ConsoleService.subscribe(setOutput);\n    },[]);\n\n    const onLiveReloadChange = () => {\n        setOutput(null);\n        setLiveReload(!liveReload);\n    };\n\n    const runCode = () => {\n        console.logs = [];\n        try {\n            // eslint-disable-next-line no-eval\n            eval(code);\n        } catch(error) {\n            console.log(error);\n        }\n        setOutput([...console.logs]);\n    };\n\n    const clearLogs = () => {\n        setOutput(null);\n        console.logs = [];\n    };\n\n    const definedOutput = output;\n    // const definedOutput = !liveReload ? output : logs;\n\n    return (\n        <div className=\"console-output\">\n            <div className=\"actions\">\n                <button onClick={runCode}>RUN</button>\n                <button onClick={clearLogs}>CLEAR</button>\n                {/*<label>*/}\n                {/*    <input checked={liveReload} onChange={onLiveReloadChange} type=\"checkbox\"/>*/}\n                {/*    live reload*/}\n                {/*</label>*/}\n            </div>\n            <pre>\n                {\n                    definedOutput && definedOutput.map((element, index) => {\n                        const { message, lineNumber } = element;\n                        const [item] = message;\n                        const mes =  message.length > 1 ? message : message[0];\n                        const lastMes = mes === undefined ? 'undefined' : JSON.stringify(mes);\n                        const text = item && item.message ? item.message : lastMes;\n                        return (\n                            <output className=\"output\" key={index}>\n                                {text}\n                                <span className=\"sticky-text\">{ lineNumber && `line:${lineNumber}`}</span>\n                            </output>\n                        )\n                    })\n                }\n            </pre>\n        </div>\n    );\n}\n\nexport default Console;\n","import React, { useState } from 'react';\nimport './App.css';\nimport MonacoEditor from './components/MonacoEditor';\nimport Console from './components/Console';\nimport io from 'socket.io-client';\nimport lodash from 'lodash';\n\nlet socket;\n\nfunction App() {\n  const [output, setOutput] = useState('');\n  const [text, setText] = useState('');\n  const debounced = lodash.debounce(() => setOutput(console.logs), 700);\n\n  const onChange = (value, e) => {\n    // runCode(value);\n    // debounced();\n    socket.emit('mess', value);\n    setText(value);\n  };\n\n  const editorDidMount = (editor) => {\n    socket = io.connect('https://live-editor.herokuapp.com/');\n\n    const getFromSocket = (data) => {\n      const viewState = editor.saveViewState();\n      setText(data);\n      // runCode(data);\n      // debounced();\n      editor.restoreViewState(viewState);\n    };\n\n    socket.on('text', getFromSocket);\n    socket.on('newUser', (data) => {\n      setText(data);\n      // runCode(data);\n      // debounced();\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <MonacoEditor value={text} onChange={onChange} editorDidMount={editorDidMount} />\n      <Console code={text} logs={output}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport Editor from 'react-monaco-editor';\n\nconst MonacoEditor = ({onChange, value, editorDidMount}) => {\n    const options = {\n        selectOnLineNumbers: true,\n        automaticLayout: true\n    };\n    return (\n        <Editor\n            width=\"60%\"\n            language=\"javascript\"\n            theme=\"vs-dark\"\n            options={options}\n            onChange={onChange}\n            value={value}\n            editorDidMount={editorDidMount}\n        />\n    );\n}\n\nexport default MonacoEditor;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ConsoleService from '../ConsoleService';\n\nconsole.stdlog = console.log.bind(console);\nconsole.logs = [];\nconsole.log = (...args) => {\n    const firstPart = (new Error()).stack.split('<anonymous>')[1];\n    const lineNumber = firstPart && firstPart.split(':')[1];\n    console.logs.push({ lineNumber, message: args });\n    ConsoleService.notify([...console.logs]);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './components/LogsReplacer';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}