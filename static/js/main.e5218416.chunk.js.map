{"version":3,"sources":["App.js","components/MonacoEditor.js","components/Console.js","serviceWorker.js","index.js"],"names":["socket","console","stdlog","log","bind","logs","_len","arguments","length","args","Array","_key","push","runCode","code","eval","error","App","_useState","useState","_useState2","Object","_Users_taraslevitskyi_projects_react_live_editor_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","output","setOutput","_useState3","_useState4","text","setText","debounced","lodash","debounce","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","_components_MonacoEditor__WEBPACK_IMPORTED_MODULE_3__","value","onChange","e","emit","editorDidMount","editor","io","connect","on","data","viewState","saveViewState","restoreViewState","_components_Console__WEBPACK_IMPORTED_MODULE_4__","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_monaco_editor__WEBPACK_IMPORTED_MODULE_1__","react_monaco_editor__WEBPACK_IMPORTED_MODULE_1___default","MonacoEditor","_ref","width","language","theme","options","selectOnLineNumbers","automaticLayout","Console","map","element","index","item","message","JSON","stringify","key","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gpCAaIA,OANJC,QAAQC,OAASD,QAAQE,IAAIC,KAAKH,SAClCA,QAAQI,KAAO,GACfJ,QAAQE,IAAM,WAAa,QAAAG,EAAAC,UAAAC,OAATC,EAAS,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAATF,EAASE,GAAAJ,UAAAI,GACzBV,QAAQI,KAAKO,KAAKH,IAKpB,IAAMI,QAAU,SAAVA,QAAWC,MACfb,QAAQI,KAAO,GACf,IAEEU,KAAKD,MACL,MAAME,OACNf,QAAQE,IAAIa,SAIhB,SAASC,MAAM,IAAAC,EACeC,oDAAS,IADxBC,EAAAC,OAAAC,uKAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACEI,EADFJ,EAAA,GAAAK,EAEWN,oDAAS,IAFpBO,EAAAL,OAAAC,uKAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEAE,EAFAF,EAAA,GAGPG,EAAYC,8CAAOC,SAAS,kBAAMP,EAAUvB,QAAQI,OAAO,KA4BjE,OACE2B,2CAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,2CAAAC,EAAAC,cAACE,sDAAA,EAAD,CAAcC,MAAOV,EAAMW,SA5Bd,SAACD,EAAOE,GACvB1B,QAAQwB,GACRR,IACA7B,OAAOwC,KAAK,OAAQH,GACpBT,EAAQS,IAwByCI,eArB5B,SAACC,IACtB1C,OAAS2C,wDAAGC,QAAQ,+BAUbC,GAAG,OARY,SAACC,GACrB,IAAMC,EAAYL,EAAOM,gBACzBpB,EAAQkB,GACRjC,QAAQiC,GACRjB,IACAa,EAAOO,iBAAiBF,KAI1B/C,OAAO6C,GAAG,UAAW,SAACC,GACpBlB,EAAQkB,GACRjC,QAAQiC,GACRjB,SAOAG,2CAAAC,EAAAC,cAACgB,iDAAA,EAAD,CAAS3B,OAAQA,KAKRN,4DChEf,IAAAkC,EAAAC,EAAA,IAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,KAAAI,EAAAJ,EAAAE,EAAAC,GAqBeE,IAlBM,SAAAC,GAAuC,IAArCpB,EAAqCoB,EAArCpB,SAAUD,EAA2BqB,EAA3BrB,MAAOI,EAAoBiB,EAApBjB,eAKpC,OACIY,EAAApB,EAAAC,cAACsB,EAAAvB,EAAD,CACI0B,MAAM,MACNC,SAAS,aACTC,MAAM,UACNC,QATQ,CACZC,qBAAqB,EACrBC,iBAAiB,GAQb1B,SAAUA,EACVD,MAAOA,EACPI,eAAgBA,qECSbwB,IAvBC,SAAAP,GAAgB,IAAbnC,EAAamC,EAAbnC,OACf,OACIS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,WAEQX,GAAUA,EAAO2C,IAAI,SAACC,EAASC,GAAU,IAC9BC,EAD8BhD,OAAAC,EAAA,EAAAD,CACtB8C,EADsB,MAE/BxC,EAAO0C,GAAQA,EAAKC,QAAUD,EAAKC,QACnCC,KAAKC,UACHL,EAAQ3D,OAAS,EAAI2D,EAAUA,EAAQ,IAE/C,OACInC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASsC,IAAKL,GAC3BzC,gNCHb+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAhD,EAAAC,cAACjB,EAAA,EAAD,MAASiE,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e5218416.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport MonacoEditor from './components/MonacoEditor';\nimport Console from './components/Console';\nimport io from 'socket.io-client';\nimport lodash from 'lodash';\n\nconsole.stdlog = console.log.bind(console);\nconsole.logs = [];\nconsole.log = (...args) => {\n  console.logs.push(args);\n};\n\nlet socket;\n\nconst runCode = (code) => {\n  console.logs = [];\n  try {\n    // eslint-disable-next-line no-eval\n    eval(code);\n  } catch(error) {\n    console.log(error);\n  }\n};\n\nfunction App() {\n  const [output, setOutput] = useState('');\n  const [text, setText] = useState('');\n  const debounced = lodash.debounce(() => setOutput(console.logs), 700);\n\n  const onChange = (value, e) => {\n    runCode(value);\n    debounced();\n    socket.emit('mess', value);\n    setText(value);\n  };\n\n  const editorDidMount = (editor) => {\n    socket = io.connect('http://192.168.0.102:4000/');\n\n    const getFromSocket = (data) => {\n      const viewState = editor.saveViewState();\n      setText(data);\n      runCode(data);\n      debounced();\n      editor.restoreViewState(viewState);\n    };\n\n    socket.on('text', getFromSocket);\n    socket.on('newUser', (data) => {\n      setText(data);\n      runCode(data);\n      debounced();\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <MonacoEditor value={text} onChange={onChange} editorDidMount={editorDidMount} />\n      <Console output={output}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport Editor from 'react-monaco-editor';\n\nconst MonacoEditor = ({onChange, value, editorDidMount}) => {\n    const options = {\n        selectOnLineNumbers: true,\n        automaticLayout: true\n    };\n    return (\n        <Editor\n            width=\"60%\"\n            language=\"javascript\"\n            theme=\"vs-dark\"\n            options={options}\n            onChange={onChange}\n            value={value}\n            editorDidMount={editorDidMount}\n        />\n    );\n}\n\nexport default MonacoEditor;\n","import React from 'react';\n\nconst Console = ({ output }) => {\n    return (\n        <div className=\"console-output\">\n            <pre>\n                {\n                    output && output.map((element, index) => {\n                        const [item] = element;\n                        const text = item && item.message ? item.message\n                            : JSON.stringify(\n                                element.length > 1 ? element : element[0]\n                            );\n                        return (\n                            <output className=\"output\" key={index}>\n                                {text}\n                            </output>\n                        )\n                    })\n                }\n            </pre>\n        </div>\n    );\n}\n\nexport default Console;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}